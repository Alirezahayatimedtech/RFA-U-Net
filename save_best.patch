cat << 'EOF' > save_best.patch
diff --git a/src/rfa-u-net.py b/src/rfa-u-net.py
index 1234567..89abcde 100644
--- a/src/rfa-u-net.py
+++ b/src/rfa-u-net.py
@@ -86,7 +86,12 @@ def train_fold(train_loader, valid_loader, test_loader, model, criterion, optim
     best_choroid = -1.0
     model.train()
-    for epoch in range(num_epochs):
+    for epoch in range(num_epochs):
         running_loss = 0.0
@@ -102,7 +107,48 @@ def train_fold(train_loader, valid_loader, test_loader, model, criterion, optim
         print(f"Epoch {epoch+1}/{num_epochs}, Loss: {running_loss/len(train_loader):.4f}")
 
+        # â€” validation pass â€”
+        model.eval()
+        dice_choroid_scores = []
+        with torch.no_grad():
+            for images, masks in valid_loader:
+                images, masks = images.to(device), masks.to(device)
+                outputs = model(images)
+                _, dch = dice_score(outputs, masks)
+                dice_choroid_scores.append(dch)
+        avg_choroid = np.mean(dice_choroid_scores)
+        print(f"  â†’ Validation Choroid Dice: {avg_choroid:.4f}")
+
+        # â€” save best checkpoint â€”
+        if avg_choroid > best_choroid:
+            best_choroid = avg_choroid
+            ckpt = {
+                'epoch': epoch + 1,
+                'model_state_dict': model.state_dict(),
+                'optimizer_state_dict': optimizer.state_dict(),
+                'scaler_state_dict': scaler.state_dict(),
+                'val_choroid_dice': best_choroid
+            }
+            os.makedirs("weights", exist_ok=True)
+            torch.save(ckpt, "weights/best_rfa_unet.pth")
+            print(f"ðŸ’¾ New best checkpoint saved: weights/best_rfa_unet.pth")
+
+        model.train()
+
+    return best_choroid
-
-    return avg_dice_combined, avg_dice_choroid, avg_upper_signed_error, avg_upper_unsigned_error, avg_lower_signed_error, avg_lower_unsigned_error
EOF
